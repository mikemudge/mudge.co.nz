# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  install_deps:
    docker:
      - image: cimg/python:3.6.9
        environment:
          APP_SETTINGS: settings.test

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "frozen_requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r frozen_requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "frozen_requirements.txt" }}

  test:
    docker:
      - image: cimg/python:3.6.9
        environment:
          APP_SETTINGS: settings.test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6-ram
        environment:
          POSTGRES_USER: mudgeconzTest
          POSTGRES_DB: mudgeconzTest
          POSTGRES_PASSWORD: testing

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "frozen_requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run:
          name: add commithash version
          command:
            touch .commithash
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pytest tests

  deploy:
    docker:
      - image: cimg/base:2021.04
        environment:
          APP_SETTINGS: settings.test

    working_directory: ~/repo

    steps:
      - checkout

      - add_ssh_keys
      - run:
          name: Keyscan Github (HACK)
          command: ssh-keyscan -H mudge.co.nz >> ~/.ssh/known_hosts
      - run:
          name: deploy via ssh, git pull and deploy.sh
          command:
            ssh mudge@mudge.co.nz "cd projects/pyauto && git pull && ./deploy.sh"

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_deps
      - test:
          requires:
            - install_deps
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - master
